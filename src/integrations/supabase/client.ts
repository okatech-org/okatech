// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Log environment status
console.log('[Supabase Client] URL configured:', !!SUPABASE_URL);
console.log('[Supabase Client] Key configured:', !!SUPABASE_PUBLISHABLE_KEY);

let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

// Create a dummy client that returns null responses when Supabase is not configured
class DummySupabaseClient {
  auth = {
    onAuthStateChange: (callback: any) => {
      console.warn('[Supabase Dummy] auth.onAuthStateChange() called - Supabase not configured');
      return { data: { subscription: { unsubscribe: () => {} } } };
    },
    signUp: async (params: any) => {
      console.warn('[Supabase Dummy] auth.signUp() called - Supabase not configured');
      return { data: { user: null, session: null }, error: new Error('Supabase not configured') };
    },
    signInWithPassword: async (params: any) => {
      console.warn('[Supabase Dummy] auth.signInWithPassword() called - Supabase not configured');
      return { data: { user: null, session: null }, error: new Error('Supabase not configured') };
    },
    signOut: async () => {
      console.warn('[Supabase Dummy] auth.signOut() called - Supabase not configured');
      return { error: null };
    },
    getSession: async () => {
      console.warn('[Supabase Dummy] auth.getSession() called - Supabase not configured');
      return { data: { session: null }, error: null };
    },
    getUser: async () => {
      console.warn('[Supabase Dummy] auth.getUser() called - Supabase not configured');
      return { data: { user: null }, error: null };
    }
  };
  functions = {
    invoke: async (functionName: string) => {
      console.warn(`[Supabase Dummy] functions.invoke('${functionName}') called - Supabase not configured`);
      return { data: null, error: new Error('Supabase not configured - please set environment variables') };
    }
  };
  from = (table: string) => ({
    insert: async (data: any) => {
      console.warn(`[Supabase Dummy] from('${table}').insert() called - Supabase not configured`);
      return { data: null, error: new Error('Supabase not configured') };
    },
    select: () => ({
      eq: (column: string, value: any) => ({
        single: async () => {
          console.warn(`[Supabase Dummy] select().eq('${column}', ${value}).single() called - Supabase not configured`);
          return { data: null, error: new Error('Supabase not configured') };
        },
        maybeSingle: async () => {
          console.warn(`[Supabase Dummy] select().eq('${column}', ${value}).maybeSingle() called - Supabase not configured`);
          return { data: null, error: new Error('Supabase not configured') };
        }
      })
    }),
    update: (data: any) => ({
      eq: async (column: string, value: any) => {
        console.warn(`[Supabase Dummy] update().eq('${column}', ${value}) called - Supabase not configured`);
        return { data: null, error: new Error('Supabase not configured') };
      }
    }),
    delete: () => ({
      eq: async (column: string, value: any) => {
        console.warn(`[Supabase Dummy] delete().eq('${column}', ${value}) called - Supabase not configured`);
        return { error: new Error('Supabase not configured') };
      }
    })
  });
}

// Initialize Supabase client only if credentials are provided
if (SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY) {
  try {
    console.log('[Supabase Client] Initializing real client...');
    supabaseInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    });
    console.log('[Supabase Client] Real client initialized successfully');
  } catch (error) {
    console.warn('[Supabase Client] Failed to initialize real client:', error);
    supabaseInstance = null;
  }
} else {
  console.log('[Supabase Client] Supabase credentials not provided - using dummy client');
}

// Export the client or a dummy if not configured
export const supabase = supabaseInstance || (new DummySupabaseClient() as any);